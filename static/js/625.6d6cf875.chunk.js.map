{"version":3,"file":"static/js/625.6d6cf875.chunk.js","mappings":"qgCAaMA,EAAUC,EACVC,EAAkBC,KAAKC,IAAIJ,EAAOK,OAAQ,GAE1CC,GAAYC,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,CAAH,0IAQTE,GAAiBF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,wBAiFpB,EA9E2B,WAAO,IAAD,EAC/B,EAA0BI,EAAAA,SAAe,GAAzC,eAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,EAAAA,UAAe,GAA3C,eAAOG,EAAP,KAAeC,EAAf,KACA,EAA8BJ,EAAAA,SAA0BK,MAAMd,GAAiBe,MAAK,IAApF,eAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8CR,EAAAA,UAAe,GAA7D,eAAOS,EAAP,KAAwBC,EAAxB,KACQC,GAAgBC,EAAAA,EAAAA,KAAhBD,YACFE,EAAWb,EAAAA,OAA0B,MACrCc,GAAWC,EAAAA,EAAAA,MAEjBf,EAAAA,WAAgB,WAMN,IAAD,EALFG,EAMK,OAARU,QAAQ,IAARA,GAAA,UAAAA,EAAUG,eAAV,SAAmBC,UC3C2B,SAACC,GACnD,IAAK,IAAIC,EAAID,EAAMxB,OAAS,EAAGyB,EAAI,EAAGA,IAAK,CACzC,IAAMC,EAAI5B,KAAK6B,MAAM7B,KAAK8B,UAAYH,EAAI,IADD,EAElB,CAACD,EAAME,GAAIF,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAME,GAFwB,IAG1C,CACF,CDiCKG,CAAalC,GACbmB,EAAWH,MAAMd,GAAiBe,MAAK,IACvCJ,EAAS,GACTE,EAAUf,GAAUA,EAAOK,OAAS,GAIvC,GAAE,CAACS,IAEJ,IAAMqB,EAAexB,EAAAA,aAAkB,SAACyB,GAO9B,IAAD,GANPjB,GAAY,SAACkB,GAEX,OADAA,EAAUzB,GAASwB,EACZC,CACR,IACGzB,EAAQV,EAAkB,GAC5BW,EAASD,EAAQ,IAET,OAARY,QAAQ,IAARA,GAAA,UAAAA,EAAUG,eAAV,SAAmBW,QACnBjB,GAAmB,GAEtB,GAAE,CAACT,IAEE2B,EAAmB,WAAO,IAAD,EAC7BlB,GAAmB,GACnBN,GAAU,GACF,OAARS,QAAQ,IAARA,GAAA,UAAAA,EAAUG,eAAV,SAAmBa,OACpB,EAaD,OACE,UAAC,EAAD,YACE,UAAC/B,EAAD,CAAgBgC,WAAS,EAACC,UAAU,SAASC,WAAW,SAASC,eAAe,SAAhF,WACE,SAAC,KAAD,CAAOC,IAAKrB,KACZ,SAAC,KAAD,CAAYsB,QAAQ,KAApB,mBACMlC,EAAQ,EADd,cACqBV,SAGvB,SAAC,KAAD,CACE6C,MAAO/C,EAAOY,GACdoC,SAAUlC,EACVmC,OAAQd,KAEV,SAAC,KAAD,CACEe,KAAM9B,EACN+B,QAASZ,EACTvC,OACEkB,EAAQkC,KAAI,SAACC,EAAQzC,GAAT,eAAC,UACRZ,EAAOY,IADA,IACQwB,QAASiB,GADjB,IAIdC,MAAc,OAAR9B,QAAQ,IAARA,GAAA,UAAAA,EAAUG,eAAV,eAAmB2B,OAAQ,EACjCC,OAjCoB,SAACC,EAAcC,GAAoB,IAAD,EAC1DnC,EACEkC,EACAC,EACAvC,EAAQwC,QAAO,SAACC,GAAD,OAAOA,CAAP,IAAUtD,QACjB,OAARmB,QAAQ,IAARA,GAAA,UAAAA,EAAUG,eAAV,eAAmB2B,OAAQ,GAE7Bf,IACAd,EAAS,eACV,MA4BF,C","sources":["pages/Spelling/Spelling.tsx","utils/array.ts"],"sourcesContent":["import * as React from 'react';\nimport { Container as MUIContainer, Grid } from '@mui/material';\nimport styled from '@emotion/styled';\nimport { IVocab } from 'types/vocab';\n\nimport VocabList from 'assets/data/vocabs.json';\nimport { shuffleArray } from 'utils';\nimport { ResultModal, SpellingCard, Timer } from 'components/organisms';\nimport { Typography } from 'components/atoms';\nimport { useSocket } from 'contexts/SocketContext';\nimport { TimerHandle } from 'components/organisms/Timer';\nimport { useNavigate } from 'react-router-dom';\n\nconst vocabs = (VocabList as IVocab[]);\nconst NO_OF_QUESTIONS = Math.min(vocabs.length, 5);\n\nconst Container = styled(MUIContainer)`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n`;\n\nconst CounterWrapper = styled(Grid)`\n`;\n\nconst Spelling: React.FC = () => {\n  const [index, setIndex] = React.useState(0);\n  const [loaded, setLoaded] = React.useState(false);\n  const [records, setRecords] = React.useState<boolean[]>(Array(NO_OF_QUESTIONS).fill(false));\n  const [resultModalOpen, setResultModalOpen] = React.useState(false);\n  const { updateScore } = useSocket();\n  const timerRef = React.useRef<TimerHandle>(null);\n  const navigate = useNavigate();\n\n  React.useEffect(() => {\n    if (!loaded) {\n      shuffleArray(vocabs);\n      setRecords(Array(NO_OF_QUESTIONS).fill(false));\n      setIndex(0);\n      setLoaded(vocabs && vocabs.length > 0);\n    } else {\n      timerRef?.current?.start();\n    }\n  }, [loaded]);\n\n  const nextQuestion = React.useCallback((correct: boolean) => {\n    setRecords(((prevState) => {\n      prevState[index] = correct;\n      return prevState;\n    }));\n    if (index < NO_OF_QUESTIONS - 1) {\n      setIndex(index + 1);\n    } else {\n      timerRef?.current?.pause();\n      setResultModalOpen(true);\n    }\n  }, [index]);\n\n  const handelModalClose = () => {\n    setResultModalOpen(false);\n    setLoaded(false);\n    timerRef?.current?.reset();\n  };\n\n  const handleUpdateScore = (name: string, avatar: string) => {\n    updateScore(\n      name,\n      avatar,\n      records.filter((r) => r).length,\n      timerRef?.current?.time || 0,\n    );\n    handelModalClose();\n    navigate('/leaderboard');\n  };\n\n  return (\n    <Container>\n      <CounterWrapper container direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\n        <Timer ref={timerRef} />\n        <Typography variant=\"h5\">\n          {`${index + 1} / ${NO_OF_QUESTIONS}`}\n        </Typography>\n      </CounterWrapper>\n      <SpellingCard\n        vocab={vocabs[index]}\n        loading={!loaded}\n        onNext={nextQuestion}\n      />\n      <ResultModal\n        open={resultModalOpen}\n        onClose={handelModalClose}\n        vocabs={\n          records.map((record, index) => ({\n            ...vocabs[index], correct: record,\n          }))\n        }\n        time={timerRef?.current?.time || 0}\n        onSave={handleUpdateScore}\n      />\n    </Container>\n  );\n};\n\nexport default Spelling;\n","export const shuffleArray: (array: any[]) => void = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};\n"],"names":["vocabs","VocabList","NO_OF_QUESTIONS","Math","min","length","Container","styled","MUIContainer","CounterWrapper","Grid","React","index","setIndex","loaded","setLoaded","Array","fill","records","setRecords","resultModalOpen","setResultModalOpen","updateScore","useSocket","timerRef","navigate","useNavigate","current","start","array","i","j","floor","random","shuffleArray","nextQuestion","correct","prevState","pause","handelModalClose","reset","container","direction","alignItems","justifyContent","ref","variant","vocab","loading","onNext","open","onClose","map","record","time","onSave","name","avatar","filter","r"],"sourceRoot":""}