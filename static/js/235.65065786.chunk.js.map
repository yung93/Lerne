{"version":3,"file":"static/js/235.65065786.chunk.js","mappings":"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","sources":["components/atoms/Typography/Typography.tsx","components/atoms/PageContainer/PageContainer.tsx","components/atoms/Skeleton/Skeleton.tsx","components/atoms/Modal/Modal.tsx","components/molecules/Button/Button.tsx","components/molecules/SplitInput/SplitInput.tsx","components/organisms/SpellingCard/SpellingCard.tsx","utils/string.ts","components/organisms/ResultModal/ResultModal.tsx","pages/Spelling/Spelling.tsx","utils/array.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Typography as MUITypography,\n  TypographyProps as MUITypographyProps,\n} from '@mui/material';\n\nexport type TypographyProps = MUITypographyProps\n\nconst Typography: React.FC<TypographyProps> = ({ children, ...rest }) => (\n  <MUITypography {...rest}>\n    {children}\n  </MUITypography>\n);\n\nexport default Typography;\n","import * as React from 'react';\nimport {\n  Container,\n  ContainerProps,\n} from '@mui/material';\nimport styled from '@emotion/styled';\n\ntype PageContainerProps = ContainerProps;\n\nconst StyledContainer = styled(Container)`\n  height: 100%;\n`;\n\nconst PageContainer: React.FC<PageContainerProps> = ({ children, ...rest }) => (\n  <React.Suspense fallback={<div data-testid=\"pageLoader\">Loading...</div>}>\n    <StyledContainer maxWidth=\"md\" {...rest}>{children}</StyledContainer>\n  </React.Suspense>\n);\n\nexport default PageContainer;\n","import * as React from 'react';\nimport { Skeleton as MUISkeleton, SkeletonProps as MUISkeletonProps } from '@mui/material';\nimport styled from '@emotion/styled';\nimport { Typography } from '../Typography';\n\ninterface SkeletonProps extends MUISkeletonProps {\n    type: 'vocab'\n}\n\nconst VocabSkeletonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: stretch;\n  align-items: center;\n`;\n\nconst QuestionSkeleton = styled(MUISkeleton)`\n  width: 100%;\n`;\n\nconst Skeleton: React.FC<SkeletonProps> = ({ children, type, ...rest }) => (\n  <VocabSkeletonContainer>\n    <Typography variant=\"h3\" width=\"100%\"><QuestionSkeleton variant=\"text\" width=\"100%\" /></Typography>\n    <Typography variant=\"h5\" width=\"50%\"><QuestionSkeleton variant=\"text\" /></Typography>\n  </VocabSkeletonContainer>\n);\n\nexport default Skeleton;\n","import * as React from 'react';\nimport {\n  Box, Dialog, DialogProps, Grid, styled,\n} from '@mui/material';\nimport { Typography } from 'components/atoms';\n\nexport interface ModalProps extends Omit<DialogProps, 'onClose'> {\n    onClose: () => void;\n    header?: {\n        icon?: JSX.Element;\n        title: string;\n    };\n}\n\nconst TitleWrapper = styled(Grid)`\n  background-color: ${({ theme }) => theme.palette.background.paper};\n  padding: 10px;\n  & .MuiSvgIcon-root{\n    font-size: 40px;\n  }\n`;\n\nconst Content = styled(Box)`\n  height: 100%;\n  overflow: scroll;\n  padding: 10px;\n`;\n\nconst Modal: React.FC<ModalProps> = ({\n  children, header, onClose, ...rest\n}) => (\n  <Dialog onClose={onClose} {...rest}>\n    {\n        header\n              && (\n              <TitleWrapper direction=\"column\" alignItems=\"center\" container>\n                {header.icon}\n                {header.title\n                  && (\n                  <Typography variant=\"h5\" textAlign=\"center\">\n                    {header.title}\n                  </Typography>\n                  )}\n              </TitleWrapper>\n              )\n      }\n    <Content>{children}</Content>\n  </Dialog>\n);\n\nexport default Modal;\n","import * as React from 'react';\nimport {\n  Button as MUIButton,\n  ButtonProps as MUIButtonProps,\n} from '@mui/material';\nimport styled from '@emotion/styled';\nimport { Typography } from 'components/atoms';\n\ntype ButtonSize = 'small' | 'medium' | 'large' | 'xlarge';\n\ninterface ButtonProps extends Omit<MUIButtonProps, 'size'> {\n    size?: ButtonSize;\n}\n\nconst StyledButton = styled(MUIButton)`\n   &.MuiButton-sizeXLarge {\n     width: 100%;\n     max-width: 350px;\n     height: 100px;\n     border-width: 5px;\n     border-radius: 20px;\n     letter-spacing: 5px;\n   }\n`;\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({\n  children,\n  size = 'large',\n  ...rest\n}, ref) => {\n  const sizeMapper:\n      (size: ButtonSize) => 'small' | 'medium' | 'large' = (size) => {\n        switch (size) {\n          case 'xlarge':\n            return 'large';\n          default:\n            return size;\n        }\n      };\n  const classMapper:\n      (size: ButtonSize) => string = (size) => {\n        switch (size) {\n          case 'xlarge':\n            return 'MuiButton-sizeXLarge';\n          default:\n            return size;\n        }\n      };\n  return (\n    <StyledButton\n      size={sizeMapper(size)}\n      className={classMapper(size)}\n      ref={ref}\n      {...rest}\n    >\n      <Typography variant=\"h5\">{children}</Typography>\n    </StyledButton>\n  );\n});\n\nexport default Button;\n","import * as React from 'react';\nimport {\n  UseControllerProps, useController, useFormContext,\n} from 'react-hook-form';\nimport { Input, styled } from '@mui/material';\nimport { ChangeEvent } from 'react';\n\ninterface SplitInputProps<FieldValue extends Record<string, any>> extends UseControllerProps<FieldValue>{\n    size: number;\n    required?: boolean;\n    color?: 'error' | 'success' | 'primary';\n    disabled?: boolean;\n}\n\nconst InputWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n`;\n\nconst StyledInput = styled(Input)<{color: 'error' | 'success' | 'primary'}>`\n  margin-right: 5px;\n  margin-left: 5px;\n  font-size: 40px;\n  max-width: 50px;\n  color: ${({ theme, color }) => theme.palette[color].main};\n  \n  & input {\n    text-align: center;\n    &.Mui-disabled {\n      color: ${({ theme, color }) => theme.palette[color].main};\n      -webkit-text-fill-color: ${({ theme, color }) => theme.palette[color].main};\n    }\n  }\n  &.Mui-disabled {\n    color: ${({ theme, color }) => theme.palette[color].main};\n  }\n`;\n\nconst SplitInput = <FieldValue extends Record<string, any>>({\n  size, required, color = 'primary', disabled, name, rules, ...rest\n}: SplitInputProps<FieldValue>) => {\n  const inputsRef = React.useRef<HTMLInputElement[]>([]);\n  const { control } = useFormContext<FieldValue>();\n  const { field: { onChange, value, ref }, fieldState: { error } } = useController({\n    name, control, rules: { required, ...rules }, ...rest,\n  });\n\n  const handleOnValueChange:\n      (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number, onChange: (...event: any[]) => void, currValue: string[]) => void = (e, index, onChange, currValue) => {\n        const temp = currValue || Array(size).fill('');\n        temp[index] = e.target.value;\n        onChange(temp);\n        if (e.target.value.length >= 1 && index < size - 1) {\n          inputsRef.current[index + 1].focus();\n        }\n        if (e.target.value.length <= 0 && index > 0) {\n          inputsRef.current[index - 1].focus();\n        }\n      };\n\n  const handleKeyPress: (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>, index: number, onChange: (...event: any[]) => void, currValue: string[]) => void = (e, index, onChange, currValue) => {\n    if (e.key === 'Backspace' && e.target.value.length <= 0 && index > 0) {\n      inputsRef.current[index - 1].focus();\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowLeft' && index > 0) {\n      inputsRef.current[index - 1].focus();\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowRight' && index < size - 1) {\n      inputsRef.current[index + 1].focus();\n      e.preventDefault();\n    }\n    if (e.key === e.target.value && index < size - 1) {\n      inputsRef.current[index + 1].focus();\n      e.preventDefault();\n    }\n  };\n\n  React.useEffect(() => {\n    if (!disabled) {\n      inputsRef.current[0].focus();\n    }\n  }, [disabled]);\n\n  return (\n    <InputWrapper>\n      {\n          Array(size).fill('').map((_, index) => (\n            <StyledInput\n              inputRef={\n                (e: HTMLInputElement) => {\n                  inputsRef.current[index] = e;\n                  if (index === 0) {\n                    ref(e);\n                  }\n                }\n              }\n              maxRows={1}\n              multiline={false}\n              key={`${name}_${index}`}\n              inputProps={{\n                maxLength: 1,\n                autoCapitalize: 'none',\n                autoComplete: 'none',\n              }}\n              onChange={(e) => {\n                e.preventDefault();\n                handleOnValueChange(e, index, onChange, value);\n              }}\n              onFocus={(e) => {\n                e.target.select();\n              }}\n              onKeyDown={(e) => {\n                handleKeyPress(e, index, onChange, value);\n              }}\n              color={error ? 'error' : color}\n              disabled={disabled}\n              value={value ? value[index] : ''}\n              autoFocus={index === 0}\n            />\n          ))\n      }\n    </InputWrapper>\n  );\n};\n\nexport default SplitInput;\n","import * as React from 'react';\nimport { IVocab } from 'types/vocab';\nimport { Skeleton, Typography } from 'components/atoms';\nimport { Button, SplitInput } from 'components/molecules';\nimport styled from '@emotion/styled';\nimport { SubmitHandler, useForm, FormProvider } from 'react-hook-form';\nimport ArrowForwardRoundedIcon from '@mui/icons-material/ArrowForwardRounded';\nimport { Container, ContainerProps } from '@mui/material';\n\ninterface SpellingCardProps\n    extends Omit<ContainerProps, 'vocab'>{\n    vocab: IVocab;\n    loading?: boolean;\n    onNext: (correct: boolean) => void;\n}\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n`;\n\nconst QuestionWrapper = styled.div`\n  margin-bottom: 50px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\n\nconst AnswerWrapper = styled.div`\n  margin-bottom: 40px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst SpellingCard: React.FC<SpellingCardProps> = ({\n  vocab, loading, onNext, ...rest\n}) => {\n  const [correct, setCorrect] = React.useState<boolean | null>(null);\n  const methods = useForm<{answer: string[]}>({ defaultValues: { answer: undefined } });\n  const {\n    reset, handleSubmit, formState: { isSubmitSuccessful },\n  } = methods;\n  const submitButtonRef = React.useRef<HTMLButtonElement>(null);\n  const nextButtonRef = React.useRef<HTMLButtonElement>(null);\n\n  const checkAnswer: SubmitHandler<{answer: string[]}> = ({ answer }) => {\n    const correct = answer.join('').toLowerCase() === vocab.word.toLowerCase();\n    if (correct) {\n      setCorrect(true);\n    } else {\n      setCorrect(false);\n    }\n    reset(\n      { answer: vocab.word.split('') },\n      {\n        keepValues: false,\n        keepErrors: false,\n        keepIsSubmitted: false,\n      },\n    );\n  };\n\n  const handleNext = () => {\n    if (correct === null) return;\n    reset(\n      { answer: undefined },\n      {\n        keepValues: false,\n        keepErrors: false,\n        keepIsSubmitted: false,\n      },\n    );\n    setCorrect(null);\n    onNext(correct);\n  };\n\n  React.useEffect(() => {\n    const keyDownHandler = (event: KeyboardEvent) => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        if (correct !== null) {\n          nextButtonRef?.current?.click();\n        } else {\n          submitButtonRef?.current?.click();\n        }\n      }\n    };\n\n    document.addEventListener('keydown', keyDownHandler);\n\n    return () => {\n      document.removeEventListener('keydown', keyDownHandler);\n    };\n  }, [correct]);\n  return (\n    <FormProvider {...methods}>\n      <StyledContainer disableGutters {...rest}>\n        <QuestionWrapper>\n          {\n            !loading\n              ? (\n                <>\n                  <Typography variant=\"h3\">\n                    {vocab.translation}\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {vocab.partOfSpeech}\n                  </Typography>\n                </>\n              )\n              : <Skeleton type=\"vocab\" />\n        }\n        </QuestionWrapper>\n        {\n            !loading\n            && (\n            <AnswerWrapper>\n              <SplitInput\n                size={vocab.word.length}\n                name=\"answer\"\n                color={correct === null\n                  ? 'primary' : correct\n                    ? 'success' : 'error'}\n                disabled={isSubmitSuccessful}\n                required\n              />\n            </AnswerWrapper>\n            )\n\n        }\n        {\n            correct !== null\n              ? (\n                <Button\n                  variant=\"outlined\"\n                  type=\"button\"\n                  onClick={handleNext}\n                  disabled={loading}\n                  endIcon={<ArrowForwardRoundedIcon />}\n                  ref={nextButtonRef}\n                >\n                  Next\n                </Button>\n              )\n              : (\n                <Button\n                  variant=\"contained\"\n                  type=\"submit\"\n                  onClick={handleSubmit(checkAnswer)}\n                  disabled={loading}\n                  ref={submitButtonRef}\n                >\n                  Submit\n                </Button>\n              )\n        }\n      </StyledContainer>\n    </FormProvider>\n  );\n};\n\nexport default SpellingCard;\n","import { PartOfSpeech } from 'types/vocab';\n\nexport const getPOSAbbr: (partOfSpeech: PartOfSpeech) => string = (partOfSpeech) => {\n  switch (partOfSpeech) {\n    case 'verb':\n      return 'v.';\n    case 'noun':\n      return 'n.';\n    default:\n      return partOfSpeech;\n  }\n};\n","import * as React from 'react';\nimport { Modal, ModalProps, Typography } from 'components/atoms';\nimport {\n  Container, Grid, styled,\n} from '@mui/material';\nimport { CheckRounded, CloseRounded } from '@mui/icons-material';\nimport { getPOSAbbr } from 'utils';\nimport { IVocab } from 'types/vocab';\nimport PlaylistAddCheckRoundedIcon from '@mui/icons-material/PlaylistAddCheckRounded';\n\ninterface ResultModalProps extends Omit<ModalProps, 'children'> {\n    vocabs: (IVocab & { correct: boolean})[];\n}\n\nconst StyledContainer = styled(Container)`\n  position: relative;\n`;\n\nconst ResultModal: React.FC<ResultModalProps> = ({ vocabs, onClose, ...rest }) => {\n  const correctCount = vocabs.filter((v) => v.correct).length;\n  const incorrectCount = vocabs.length - correctCount;\n  return (\n    <Modal\n      onClose={onClose}\n      header={{\n        icon: <PlaylistAddCheckRoundedIcon />,\n        title: 'Result',\n      }}\n      {...rest}\n    >\n      <StyledContainer>\n        <Grid container direction=\"column\" mb={2} mt={2}>\n          <Grid container item alignItems=\"center\" columnGap={2} alignSelf=\"center\" mb={2}>\n            <Grid item container alignItems=\"center\" justifyContent=\"center\" xs columnGap={1}>\n              <CheckRounded fontSize=\"medium\" color=\"success\" />\n              <Typography variant=\"h5\" color=\"success.main\">\n                {correctCount}\n              </Typography>\n            </Grid>\n            <Grid item container alignItems=\"center\" justifyContent=\"center\" xs columnGap={1}>\n              <CloseRounded fontSize=\"medium\" color=\"error\" />\n              <Typography variant=\"h5\" color=\"error\">\n                {incorrectCount}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid container item rowGap={1}>\n            {\n                vocabs.map(({\n                  word, translation, partOfSpeech, correct,\n                }, index) => (\n                  <Grid key={`${word}_${index}`} container item columnGap={2}>\n                    <Grid item xs={2}>\n                      <Typography variant=\"h4\" textAlign=\"right\">{index + 1}</Typography>\n                    </Grid>\n                    <Grid item container direction=\"column\" xs=\"auto\">\n                      <Typography variant=\"h5\" color={!correct ? 'error' : 'success.main'}>{word}</Typography>\n                      <Grid item container alignItems=\"center\" columnGap={1}>\n                        <Typography variant=\"body1\">{getPOSAbbr(partOfSpeech)}</Typography>\n                        <Typography variant=\"body1\">{translation}</Typography>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                ))\n            }\n\n          </Grid>\n        </Grid>\n      </StyledContainer>\n    </Modal>\n  );\n};\n\nexport default ResultModal;\n","import * as React from 'react';\nimport { Container as MUIContainer } from '@mui/material';\nimport styled from '@emotion/styled';\nimport { IVocab } from 'types/vocab';\n\nimport VocabList from 'assets/data/vocabs.json';\nimport { shuffleArray } from 'utils';\nimport { ResultModal, SpellingCard } from 'components/organisms';\nimport { Typography } from 'components/atoms';\n\nconst vocabs = (VocabList as IVocab[]);\nconst NO_OF_QUESTIONS = Math.min(vocabs.length, 10);\n\nconst Container = styled(MUIContainer)`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst CounterWrapper = styled.div`\n  margin-top: 50px;\n  margin-bottom: 100px;\n`;\n\nconst Spelling: React.FC = () => {\n  const [index, setIndex] = React.useState(0);\n  const [loaded, setLoaded] = React.useState(false);\n  const [records, setRecords] = React.useState<boolean[]>(Array(NO_OF_QUESTIONS).fill(false));\n  const [resultModalOpen, setResultModalOpen] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!loaded) {\n      shuffleArray(vocabs);\n      setRecords(Array(NO_OF_QUESTIONS).fill(false));\n      setIndex(0);\n      setLoaded(vocabs && vocabs.length > 0);\n    }\n  }, [loaded]);\n\n  const nextQuestion = React.useCallback((correct: boolean) => {\n    setRecords(((prevState) => {\n      prevState[index] = correct;\n      return prevState;\n    }));\n    if (index < NO_OF_QUESTIONS - 1) {\n      setIndex(index + 1);\n    } else {\n      setResultModalOpen(true);\n    }\n  }, [index]);\n\n  const handelModalClose = () => {\n    setResultModalOpen(false);\n    setLoaded(false);\n  };\n\n  return (\n    <Container>\n      <CounterWrapper>\n        <Typography variant=\"h5\">{`${index + 1} / ${NO_OF_QUESTIONS}`}</Typography>\n      </CounterWrapper>\n      <SpellingCard\n        vocab={vocabs[index]}\n        loading={!loaded}\n        onNext={nextQuestion}\n      />\n      <ResultModal\n        open={resultModalOpen}\n        onClose={handelModalClose}\n        vocabs={\n          records.map((record, index) => ({\n            ...vocabs[index], correct: record,\n          }))\n        }\n      />\n    </Container>\n  );\n};\n\nexport default Spelling;\n","export const shuffleArray: (array: any[]) => void = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};\n"],"names":["children","rest","StyledContainer","styled","Container","fallback","maxWidth","VocabSkeletonContainer","QuestionSkeleton","MUISkeleton","type","variant","width","TitleWrapper","Grid","theme","palette","background","paper","Content","Box","header","onClose","Dialog","direction","alignItems","container","icon","title","textAlign","StyledButton","MUIButton","React","ref","size","sizeMapper","className","classMapper","InputWrapper","StyledInput","Input","color","main","required","disabled","name","rules","inputsRef","control","useFormContext","useController","field","onChange","value","error","fieldState","current","focus","Array","fill","map","_","index","inputRef","e","maxRows","multiline","inputProps","maxLength","autoCapitalize","autoComplete","preventDefault","currValue","temp","target","length","handleOnValueChange","onFocus","select","onKeyDown","key","handleKeyPress","autoFocus","QuestionWrapper","AnswerWrapper","vocab","loading","onNext","correct","setCorrect","methods","useForm","defaultValues","answer","undefined","reset","handleSubmit","isSubmitSuccessful","formState","submitButtonRef","nextButtonRef","keyDownHandler","event","click","document","addEventListener","removeEventListener","disableGutters","translation","partOfSpeech","word","onClick","keepValues","keepErrors","keepIsSubmitted","endIcon","ArrowForwardRounded","join","toLowerCase","split","getPOSAbbr","vocabs","correctCount","filter","v","incorrectCount","PlaylistAddCheckRounded","mb","mt","item","columnGap","alignSelf","justifyContent","xs","CheckRounded","fontSize","CloseRounded","rowGap","VocabList","NO_OF_QUESTIONS","Math","min","MUIContainer","CounterWrapper","setIndex","loaded","setLoaded","records","setRecords","resultModalOpen","setResultModalOpen","array","i","j","floor","random","shuffleArray","nextQuestion","prevState","open","record"],"sourceRoot":""}