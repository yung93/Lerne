{"version":3,"file":"static/js/688.ce88bd24.chunk.js","mappings":"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","sources":["components/atoms/Typography/Typography.tsx","components/atoms/PageContainer/PageContainer.tsx","components/atoms/Skeleton/Skeleton.tsx","components/atoms/Modal/Modal.tsx","components/molecules/Button/Button.tsx","components/molecules/SplitInput/SplitInput.tsx","components/molecules/AvatarPickerInput/AvatarPickerInput.tsx","components/organisms/SpellingCard/SpellingCard.tsx","utils/string.ts","components/organisms/UpdateNameForm/UpdateNameForm.tsx","components/organisms/ResultModal/ResultModal.tsx","components/organisms/RankTable/RankTable.tsx","hooks/useTimer/useTimer.ts","components/organisms/Timer/Timer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Typography as MUITypography,\n  TypographyProps as MUITypographyProps,\n} from '@mui/material';\n\nexport type TypographyProps = MUITypographyProps\n\nconst Typography: React.FC<TypographyProps> = ({ children, ...rest }) => (\n  <MUITypography {...rest}>\n    {children}\n  </MUITypography>\n);\n\nexport default Typography;\n","import * as React from 'react';\nimport {\n  Container,\n  ContainerProps,\n} from '@mui/material';\nimport styled from '@emotion/styled';\n\ntype PageContainerProps = ContainerProps;\n\nconst StyledContainer = styled(Container)`\n  height: 100%;\n`;\n\nconst PageContainer: React.FC<PageContainerProps> = ({ children, ...rest }) => (\n  <React.Suspense fallback={<div data-testid=\"pageLoader\">Loading...</div>}>\n    <StyledContainer maxWidth=\"md\" {...rest}>{children}</StyledContainer>\n  </React.Suspense>\n);\n\nexport default PageContainer;\n","import * as React from 'react';\nimport { Skeleton as MUISkeleton, SkeletonProps as MUISkeletonProps } from '@mui/material';\nimport styled from '@emotion/styled';\nimport { Typography } from '../Typography';\n\ninterface SkeletonProps extends MUISkeletonProps {\n    type: 'vocab'\n}\n\nconst VocabSkeletonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: stretch;\n  align-items: center;\n`;\n\nconst QuestionSkeleton = styled(MUISkeleton)`\n  width: 100%;\n`;\n\nconst Skeleton: React.FC<SkeletonProps> = () => (\n  <VocabSkeletonContainer>\n    <Typography variant=\"h3\" width=\"100%\"><QuestionSkeleton variant=\"text\" width=\"100%\" /></Typography>\n    <Typography variant=\"h5\" width=\"50%\"><QuestionSkeleton variant=\"text\" /></Typography>\n  </VocabSkeletonContainer>\n);\n\nexport default Skeleton;\n","import * as React from 'react';\nimport {\n  Box, Dialog, DialogProps, Grid, styled,\n} from '@mui/material';\nimport { Typography } from 'components/atoms';\n\nexport interface ModalProps extends Omit<DialogProps, 'onClose'> {\n    onClose: () => void;\n    header?: {\n        icon?: JSX.Element;\n        title: string;\n    };\n}\n\nconst TitleWrapper = styled(Grid)`\n  background-color: ${({ theme }) => theme.palette.background.paper};\n  padding: 10px;\n  & .MuiSvgIcon-root{\n    font-size: 40px;\n  }\n`;\n\nconst Content = styled(Box)`\n  height: 100%;\n  overflow: scroll;\n  padding: 10px;\n`;\n\nconst Modal: React.FC<ModalProps> = ({\n  children, header, onClose, ...rest\n}) => (\n  <Dialog onClose={onClose} {...rest}>\n    {\n        header\n              && (\n              <TitleWrapper direction=\"column\" alignItems=\"center\" container>\n                {header.icon}\n                {header.title\n                  && (\n                  <Typography variant=\"h5\" textAlign=\"center\">\n                    {header.title}\n                  </Typography>\n                  )}\n              </TitleWrapper>\n              )\n      }\n    <Content>{children}</Content>\n  </Dialog>\n);\n\nexport default Modal;\n","import * as React from 'react';\nimport {\n  Button as MUIButton,\n  ButtonProps as MUIButtonProps,\n} from '@mui/material';\nimport styled from '@emotion/styled';\nimport { Typography } from 'components/atoms';\n\ntype ButtonSize = 'small' | 'medium' | 'large' | 'xlarge';\n\ninterface ButtonProps extends Omit<MUIButtonProps, 'size'> {\n    size?: ButtonSize;\n}\n\nconst StyledButton = styled(MUIButton)`\n   &.MuiButton-sizeXLarge {\n     width: 100%;\n     max-width: 350px;\n     height: 100px;\n     border-width: 5px;\n     border-radius: 20px;\n     letter-spacing: 5px;\n     & .MuiButton-startIcon > svg {\n       font-size: 2.1875rem;\n     }\n   }\n`;\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({\n  children,\n  size = 'large',\n  ...rest\n}, ref) => {\n  const sizeMapper:\n      (size: ButtonSize) => 'small' | 'medium' | 'large' = (size) => {\n        switch (size) {\n          case 'xlarge':\n            return 'large';\n          default:\n            return size;\n        }\n      };\n  const classMapper:\n      (size: ButtonSize) => string = (size) => {\n        switch (size) {\n          case 'xlarge':\n            return 'MuiButton-sizeXLarge';\n          default:\n            return size;\n        }\n      };\n  return (\n    <StyledButton\n      size={sizeMapper(size)}\n      className={classMapper(size)}\n      ref={ref}\n      {...rest}\n    >\n      <Typography variant=\"h5\">{children}</Typography>\n    </StyledButton>\n  );\n});\n\nexport default Button;\n","import * as React from 'react';\nimport {\n  UseControllerProps, useController, useFormContext,\n} from 'react-hook-form';\nimport { Input, styled } from '@mui/material';\nimport { ChangeEvent } from 'react';\n\ninterface SplitInputProps<FieldValue extends Record<string, any>> extends UseControllerProps<FieldValue>{\n    size: number;\n    required?: boolean;\n    color?: 'error' | 'success' | 'primary';\n    disabled?: boolean;\n}\n\nconst InputWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n`;\n\nconst StyledInput = styled(Input)<{color: 'error' | 'success' | 'primary'}>`\n  margin-right: 5px;\n  margin-left: 5px;\n  font-size: 40px;\n  max-width: 50px;\n  color: ${({ theme, color }) => theme.palette[color].main};\n  \n  & input {\n    text-align: center;\n    &.Mui-disabled {\n      color: ${({ theme, color }) => theme.palette[color].main};\n      -webkit-text-fill-color: ${({ theme, color }) => theme.palette[color].main};\n    }\n  }\n  &.Mui-disabled {\n    color: ${({ theme, color }) => theme.palette[color].main};\n  }\n`;\n\nconst SplitInput = <FieldValue extends Record<string, any>>({\n  size, required, color = 'primary', disabled, name, rules, ...rest\n}: SplitInputProps<FieldValue>) => {\n  const inputsRef = React.useRef<HTMLInputElement[]>([]);\n  const { control } = useFormContext<FieldValue>();\n  const { field: { onChange, value, ref }, fieldState: { error } } = useController({\n    name, control, rules: { required, ...rules }, ...rest,\n  });\n\n  const handleOnValueChange:\n      (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number, onChange: (...event: any[]) => void, currValue: string[]) => void = (e, index, onChange, currValue) => {\n        const temp = currValue || Array(size).fill('');\n        temp[index] = e.target.value;\n        onChange(temp);\n        if (e.target.value.length >= 1 && index < size - 1) {\n          inputsRef.current[index + 1].focus();\n        }\n        if (e.target.value.length <= 0 && index > 0) {\n          inputsRef.current[index - 1].focus();\n        }\n      };\n\n  const handleKeyPress: (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>, index: number, onChange: (...event: any[]) => void, currValue: string[]) => void = (e, index) => {\n    if (e.key === 'Backspace' && e.target.value.length <= 0 && index > 0) {\n      inputsRef.current[index - 1].focus();\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowLeft' && index > 0) {\n      inputsRef.current[index - 1].focus();\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowRight' && index < size - 1) {\n      inputsRef.current[index + 1].focus();\n      e.preventDefault();\n    }\n    if (e.key === e.target.value && index < size - 1) {\n      inputsRef.current[index + 1].focus();\n      e.preventDefault();\n    }\n  };\n\n  React.useEffect(() => {\n    if (!disabled) {\n      inputsRef.current[0].focus();\n    }\n  }, [disabled]);\n\n  return (\n    <InputWrapper>\n      {\n          Array(size).fill('').map((_, index) => (\n            <StyledInput\n              inputRef={\n                (e: HTMLInputElement) => {\n                  inputsRef.current[index] = e;\n                  if (index === 0) {\n                    ref(e);\n                  }\n                }\n              }\n              maxRows={1}\n              multiline={false}\n              key={`${name}_${index}`}\n              inputProps={{\n                maxLength: 1,\n                autoCapitalize: 'none',\n                autoComplete: 'none',\n              }}\n              onChange={(e) => {\n                e.preventDefault();\n                handleOnValueChange(e, index, onChange, value);\n              }}\n              onFocus={(e) => {\n                e.target.select();\n              }}\n              onKeyDown={(e) => {\n                handleKeyPress(e, index, onChange, value);\n              }}\n              color={error ? 'error' : color}\n              disabled={disabled}\n              value={value ? value[index] : ''}\n              autoFocus={index === 0}\n            />\n          ))\n      }\n    </InputWrapper>\n  );\n};\n\nexport default SplitInput;\n","import * as React from 'react';\nimport { useController, UseControllerProps, useFormContext } from 'react-hook-form';\nimport {\n  Avatar, Grid, IconButton, styled,\n} from '@mui/material';\nimport { common } from '@mui/material/colors';\nimport AvatarsList from '../../../assets/images/avatars.json';\n\ninterface AvatarPickerInputProps<FieldValue extends Record<string, any>> extends UseControllerProps<FieldValue>{\n    options?: string[];\n    required?: boolean;\n}\n\nconst AvatarButton = styled(IconButton)<{selected: boolean}>`\n    ${({ theme, selected }) => (selected ? `\n    border: 3px solid ${theme.palette.primary.main};\n  ` : '')}\n`;\nconst AvatarPickerInput = <FieldValue extends Record<string, any>>({\n  options = AvatarsList, name, required, rules, ...rest\n}: AvatarPickerInputProps<FieldValue>) => {\n  const { control } = useFormContext<FieldValue>();\n\n  const { field: { onChange, value } } = useController({\n    name, control, rules: { required, ...rules }, ...rest,\n  });\n  return (\n    <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n      {options.map((url, index) => {\n        const isSelected = value === url;\n        return (\n          <AvatarButton onClick={() => { onChange(url); }} selected={isSelected} key={`avatar_${index}`}>\n            <Avatar src={url} key={`avatar_${index}`} sx={{ bgcolor: common.white, padding: 1 }} />\n          </AvatarButton>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default AvatarPickerInput;\n","import * as React from 'react';\nimport { IVocab } from 'types/vocab';\nimport { Skeleton, Typography } from 'components/atoms';\nimport { Button, SplitInput } from 'components/molecules';\nimport styled from '@emotion/styled';\nimport { SubmitHandler, useForm, FormProvider } from 'react-hook-form';\nimport ArrowForwardRoundedIcon from '@mui/icons-material/ArrowForwardRounded';\nimport { Container, ContainerProps } from '@mui/material';\n\ninterface SpellingCardProps\n    extends Omit<ContainerProps, 'vocab'>{\n    vocab: IVocab;\n    loading?: boolean;\n    onNext: (correct: boolean) => void;\n}\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n`;\n\nconst QuestionWrapper = styled.div`\n  margin-bottom: 50px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\n\nconst AnswerWrapper = styled.div`\n  margin-bottom: 40px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst SpellingCard: React.FC<SpellingCardProps> = ({\n  vocab, loading, onNext, ...rest\n}) => {\n  const [correct, setCorrect] = React.useState<boolean | null>(null);\n  const methods = useForm<{answer: string[]}>({ defaultValues: { answer: undefined } });\n  const {\n    reset, handleSubmit, formState: { isSubmitSuccessful },\n  } = methods;\n  const submitButtonRef = React.useRef<HTMLButtonElement>(null);\n  const nextButtonRef = React.useRef<HTMLButtonElement>(null);\n\n  const checkAnswer: SubmitHandler<{answer: string[]}> = ({ answer }) => {\n    const correct = answer.join('').toLowerCase() === vocab.word.toLowerCase();\n    if (correct) {\n      setCorrect(true);\n    } else {\n      setCorrect(false);\n    }\n    reset(\n      { answer: vocab.word.split('') },\n      {\n        keepValues: false,\n        keepErrors: false,\n        keepIsSubmitted: false,\n      },\n    );\n  };\n\n  const handleNext = () => {\n    if (correct === null) return;\n    reset(\n      { answer: undefined },\n      {\n        keepValues: false,\n        keepErrors: false,\n        keepIsSubmitted: false,\n      },\n    );\n    setCorrect(null);\n    onNext(correct);\n  };\n\n  React.useEffect(() => {\n    const keyDownHandler = (event: KeyboardEvent) => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        if (correct !== null) {\n          nextButtonRef?.current?.click();\n        } else {\n          submitButtonRef?.current?.click();\n        }\n      }\n    };\n\n    document.addEventListener('keydown', keyDownHandler);\n\n    return () => {\n      document.removeEventListener('keydown', keyDownHandler);\n    };\n  }, [correct]);\n  return (\n    <FormProvider {...methods}>\n      <StyledContainer disableGutters {...rest}>\n        <QuestionWrapper>\n          {\n            !loading\n              ? (\n                <>\n                  <Typography variant=\"h3\">\n                    {vocab.translation}\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {vocab.partOfSpeech}\n                  </Typography>\n                </>\n              )\n              : <Skeleton type=\"vocab\" />\n        }\n        </QuestionWrapper>\n        {\n            !loading\n            && (\n            <AnswerWrapper>\n              <SplitInput\n                size={vocab.word.length}\n                name=\"answer\"\n                color={correct === null\n                  ? 'primary' : correct\n                    ? 'success' : 'error'}\n                disabled={isSubmitSuccessful}\n                required\n              />\n            </AnswerWrapper>\n            )\n\n        }\n        {\n            correct !== null\n              ? (\n                <Button\n                  variant=\"outlined\"\n                  type=\"button\"\n                  onClick={handleNext}\n                  disabled={loading}\n                  endIcon={<ArrowForwardRoundedIcon />}\n                  ref={nextButtonRef}\n                >\n                  Next\n                </Button>\n              )\n              : (\n                <Button\n                  variant=\"contained\"\n                  type=\"submit\"\n                  onClick={handleSubmit(checkAnswer)}\n                  disabled={loading}\n                  ref={submitButtonRef}\n                >\n                  Submit\n                </Button>\n              )\n        }\n      </StyledContainer>\n    </FormProvider>\n  );\n};\n\nexport default SpellingCard;\n","import { PartOfSpeech } from 'types/vocab';\n\nexport const getPOSAbbr: (partOfSpeech: PartOfSpeech) => string = (partOfSpeech) => {\n  switch (partOfSpeech) {\n    case 'verb':\n      return 'v.';\n    case 'noun':\n      return 'n.';\n    default:\n      return partOfSpeech;\n  }\n};\n\nexport const formatTime = (timer: number) => {\n  const seconds = `0${(timer % 60)}`.slice(-2);\n  const minutes = `${Math.floor(timer / 60)}`;\n\n  return `${minutes} : ${seconds}`;\n};\n","import * as React from 'react';\nimport { AvatarPickerInput, Button } from 'components/molecules';\nimport styled from '@emotion/styled';\nimport { SubmitHandler, useForm, FormProvider } from 'react-hook-form';\nimport {\n  Container, ContainerProps, Grid, TextField,\n} from '@mui/material';\nimport { useUser } from 'contexts/UserContext';\nimport AvatarsList from 'assets/images/avatars.json';\n\ninterface SpellingCardProps extends ContainerProps {\n    onSave: (name: string, avatar: string) => void;\n}\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n`;\n\nconst UpdateNameForm: React.FC<SpellingCardProps> = ({\n  onSave, ...rest\n}) => {\n  const { user } = useUser();\n  const methods = useForm<{name: string, avatar: string}>({ defaultValues: { name: user?.name, avatar: user?.avatar || AvatarsList[0] } });\n  const {\n    handleSubmit,\n    register,\n  } = methods;\n  const submitButtonRef = React.useRef<HTMLButtonElement>(null);\n\n  React.useEffect(() => {\n    const keyDownHandler = (event: KeyboardEvent) => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        submitButtonRef?.current?.click();\n      }\n    };\n\n    document.addEventListener('keydown', keyDownHandler);\n\n    return () => {\n      document.removeEventListener('keydown', keyDownHandler);\n    };\n  }, []);\n\n  const handleSave: SubmitHandler<{ name: string, avatar: string}> = ({ name, avatar }) => {\n    onSave(name, avatar);\n  };\n\n  return (\n    <FormProvider {...methods}>\n      <StyledContainer disableGutters {...rest}>\n        <form onSubmit={handleSubmit(handleSave)}>\n          <Grid container direction=\"column\" rowGap={2}>\n            <AvatarPickerInput name=\"avatar\" />\n            <Grid container item alignItems=\"center\" columnGap={1} mb={2}>\n              <Grid item xs>\n                <TextField\n                  required\n                  id=\"filled-required\"\n                  label=\"Name\"\n                  variant=\"filled\"\n                  autoFocus\n                  fullWidth\n                  {...register('name')}\n                />\n              </Grid>\n              <Button size=\"small\" variant=\"contained\" type=\"submit\" ref={submitButtonRef}>Save</Button>\n            </Grid>\n          </Grid>\n\n        </form>\n      </StyledContainer>\n    </FormProvider>\n  );\n};\n\nexport default UpdateNameForm;\n","import * as React from 'react';\nimport { Modal, ModalProps, Typography } from 'components/atoms';\nimport {\n  Accordion, AccordionDetails, AccordionSummary, Alert,\n  Container, Grid, styled,\n} from '@mui/material';\nimport { CheckRounded, CloseRounded } from '@mui/icons-material';\nimport { getPOSAbbr } from 'utils';\nimport { IVocab } from 'types/vocab';\nimport PlaylistAddCheckRoundedIcon from '@mui/icons-material/PlaylistAddCheckRounded';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { useUser } from 'contexts/UserContext';\nimport UpdateNameForm from '../UpdateNameForm/UpdateNameForm';\n\ninterface ResultModalProps extends Omit<ModalProps, 'children'> {\n    vocabs: (IVocab & { correct: boolean})[];\n    onSave: (name: string, avatar: string) => void;\n    time: number;\n}\n\nconst StyledContainer = styled(Container)`\n  position: relative;\n`;\n\nconst ResultModal: React.FC<ResultModalProps> = ({\n  vocabs, onClose, onSave, time, ...rest\n}) => {\n  const correctCount = vocabs.filter((v) => v.correct).length;\n  const incorrectCount = vocabs.length - correctCount;\n  const { user, updateUser } = useUser();\n  const isNewHighScore = !user\n      || (user.score < correctCount\n          || (user?.score === correctCount && user.time > time));\n\n  const handleSave = (name:string, avatar: string) => {\n    updateUser({\n      name, avatar, time, score: correctCount,\n    });\n    onSave(name, avatar);\n  };\n\n  return (\n    <Modal\n      onClose={onClose}\n      header={{\n        icon: <PlaylistAddCheckRoundedIcon />,\n        title: 'Result',\n      }}\n      {...rest}\n    >\n      { isNewHighScore && <Alert severity=\"success\">New Highest Score!</Alert> }\n      <StyledContainer>\n        <Grid container direction=\"column\" mb={2} mt={2}>\n          <Grid container item alignItems=\"center\" columnGap={2} alignSelf=\"center\" mb={2}>\n            <Grid item container alignItems=\"center\" justifyContent=\"center\" xs columnGap={1}>\n              <CheckRounded fontSize=\"medium\" color=\"success\" />\n              <Typography variant=\"h5\" color=\"success.main\">\n                {correctCount}\n              </Typography>\n            </Grid>\n            <Grid item container alignItems=\"center\" justifyContent=\"center\" xs columnGap={1}>\n              <CloseRounded fontSize=\"medium\" color=\"error\" />\n              <Typography variant=\"h5\" color=\"error\">\n                {incorrectCount}\n              </Typography>\n            </Grid>\n          </Grid>\n          {\n                isNewHighScore\n                  && <UpdateNameForm onSave={handleSave} />\n          }\n          <Accordion defaultExpanded={!isNewHighScore}>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n            >\n              <Typography>Vocabs</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Grid container item rowGap={1}>\n                {\n                    vocabs.map(({\n                      word, translation, partOfSpeech, correct,\n                    }, index) => (\n                      <Grid key={`${word}_${index}`} container item columnGap={2}>\n                        <Grid item xs={2}>\n                          <Typography variant=\"h4\" textAlign=\"right\">{index + 1}</Typography>\n                        </Grid>\n                        <Grid item container direction=\"column\" xs=\"auto\">\n                          <Typography variant=\"h5\" color={!correct ? 'error' : 'success.main'}>{word}</Typography>\n                          <Grid item container alignItems=\"center\" columnGap={1}>\n                            <Typography variant=\"body1\">{getPOSAbbr(partOfSpeech)}</Typography>\n                            <Typography variant=\"body1\">{translation}</Typography>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    ))\n                }\n\n              </Grid>\n            </AccordionDetails>\n          </Accordion>\n        </Grid>\n      </StyledContainer>\n    </Modal>\n  );\n};\n\nexport default ResultModal;\n","import * as React from 'react';\nimport {\n  Avatar,\n  Paper,\n  styled,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n} from '@mui/material';\nimport { IRank } from 'types/rank';\nimport { common } from '@mui/material/colors';\nimport { formatTime } from '../../../utils';\n\ninterface RankTableProps {\n    ranks: IRank[];\n}\n\nconst TableContainerWrapper = styled(Paper)`\n  width: 100%;\n  margin: 20px auto;\n  max-width: 500px;\n`;\n\nconst RankTable: React.FC<RankTableProps> = ({ ranks }) => {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <TableContainerWrapper>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell\n                key=\"avatar\"\n                align=\"center\"\n                width=\"50px\"\n              />\n              <TableCell\n                key=\"name\"\n                align=\"left\"\n              >\n                Name\n              </TableCell>\n              <TableCell\n                key=\"score\"\n                align=\"center\"\n              >\n                Score\n              </TableCell>\n              <TableCell\n                key=\"time\"\n                align=\"center\"\n              >\n                Time\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {ranks.sort((a, b) => (a.score > b.score ? -1\n              : a.score < b.score ? 1\n                : a.time < b.time ? -1 : 1))\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((rank) => (\n                <TableRow\n                  hover\n                  key={rank.id}\n                >\n                  <TableCell\n                    align=\"center\"\n                    width=\"50px\"\n                  >\n                    <Avatar src={rank.avatar} sx={{ bgcolor: common.white, padding: 1 }} />\n                  </TableCell>\n                  <TableCell\n                    component=\"th\"\n                    scope=\"row\"\n                  >\n                    {rank.name}\n                  </TableCell>\n                  <TableCell align=\"center\">{rank.score}</TableCell>\n                  <TableCell align=\"center\">{formatTime(rank.time)}</TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25]}\n        component=\"div\"\n        count={ranks.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </TableContainerWrapper>\n  );\n};\n\nexport default RankTable;\n","import * as React from 'react';\n\ntype useTimeOptions = {\n    onTimeChange?: (time: number) => void;\n}\n\nconst useTimer = (initialState?: number, options?: useTimeOptions) => {\n  const [timer, setTimer] = React.useState(initialState || 0);\n  const countRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  const handleStart = React.useCallback(() => {\n    countRef.current = setInterval(() => {\n      setTimer((timer) => timer + 1);\n      if (options?.onTimeChange) {\n        options.onTimeChange(timer + 1);\n      }\n    }, 1000);\n  }, [options, timer]);\n\n  const handlePause = React.useCallback(() => {\n    if (countRef.current) {\n      clearInterval(countRef.current);\n    }\n  }, []);\n\n  const handleReset = () => {\n    if (countRef.current) {\n      clearInterval(countRef.current);\n    }\n    setTimer(0);\n  };\n\n  return {\n    timer, handleStart, handlePause, handleReset,\n  };\n};\n\nexport default useTimer;\n","import * as React from 'react';\nimport { useTimer } from 'hooks/useTimer';\nimport { Grid, GridProps, Typography } from '@mui/material';\nimport AccessAlarmRoundedIcon from '@mui/icons-material/AccessAlarmRounded';\nimport { formatTime } from 'utils';\n\ninterface TimerProps extends GridProps {\n    autoStart?: boolean;\n    onTimeChange?: (time: number) => void;\n}\n\nexport interface TimerHandle {\n    start: () => void,\n    pause: () => number,\n    reset: () => number,\n    time: number,\n}\n\nconst Timer = React.forwardRef<TimerHandle, TimerProps>(({\n  autoStart = false,\n  onTimeChange,\n}, ref) => {\n  const {\n    timer, handleStart, handlePause, handleReset,\n  } = useTimer(0, { onTimeChange });\n\n  React.useEffect(() => {\n    if (autoStart) {\n      handleStart();\n    }\n    return () => {\n      handlePause();\n    };\n  }, []);\n\n  React.useImperativeHandle(ref, () => ({\n    start: () => {\n      handleStart();\n    },\n    pause: () => {\n      handlePause();\n      return timer;\n    },\n    reset: () => {\n      const time = timer;\n      handleReset();\n      return time;\n    },\n    time: timer,\n  }));\n\n  return (\n    <Grid container alignItems=\"center\" justifyContent=\"center\" columnGap={1}>\n      <AccessAlarmRoundedIcon />\n      <Typography variant=\"h6\">{formatTime(timer)}</Typography>\n    </Grid>\n  );\n});\n\nexport default Timer;\n"],"names":["children","rest","StyledContainer","styled","Container","fallback","maxWidth","VocabSkeletonContainer","QuestionSkeleton","MUISkeleton","variant","width","TitleWrapper","Grid","theme","palette","background","paper","Content","Box","header","onClose","Dialog","direction","alignItems","container","icon","title","textAlign","StyledButton","MUIButton","React","ref","size","sizeMapper","className","classMapper","InputWrapper","StyledInput","Input","color","main","required","disabled","name","rules","inputsRef","control","useFormContext","useController","field","onChange","value","error","fieldState","current","focus","Array","fill","map","_","index","inputRef","e","maxRows","multiline","inputProps","maxLength","autoCapitalize","autoComplete","preventDefault","currValue","temp","target","length","handleOnValueChange","onFocus","select","onKeyDown","key","handleKeyPress","autoFocus","AvatarButton","IconButton","selected","primary","options","AvatarsList","justifyContent","url","isSelected","onClick","Avatar","src","sx","bgcolor","common","padding","QuestionWrapper","AnswerWrapper","vocab","loading","onNext","correct","setCorrect","methods","useForm","defaultValues","answer","undefined","reset","handleSubmit","isSubmitSuccessful","formState","submitButtonRef","nextButtonRef","keyDownHandler","event","click","document","addEventListener","removeEventListener","disableGutters","type","translation","partOfSpeech","word","keepValues","keepErrors","keepIsSubmitted","endIcon","ArrowForwardRounded","join","toLowerCase","split","getPOSAbbr","formatTime","timer","seconds","slice","minutes","Math","floor","onSave","user","useUser","avatar","register","onSubmit","rowGap","item","columnGap","mb","xs","TextField","id","label","fullWidth","vocabs","time","correctCount","filter","v","incorrectCount","updateUser","isNewHighScore","score","PlaylistAddCheckRounded","Alert","severity","mt","alignSelf","CheckRounded","fontSize","CloseRounded","Accordion","defaultExpanded","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","TableContainerWrapper","Paper","ranks","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","sort","a","b","rank","hover","component","scope","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","initialState","setTimer","countRef","handleStart","setInterval","onTimeChange","handlePause","clearInterval","handleReset","autoStart","useTimer","start","pause","AccessAlarmRounded","Typography"],"sourceRoot":""}